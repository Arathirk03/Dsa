DATA STRUCTURES

Array list 
Linked list
Hash set
Hash map

Stack queue
heao
hraph
rwoh
tree  

algo:
sprting
searching
greedy
dynamic prog

trying to find time complexity
i)ignore smaller values.
ii)ignore constants.
iii)focus on worst case


notes notes/ sleep sleep
the time complwxity will be n^2 for step 1 n for step 2 and 1 and constabt

sleep sleep

the best case avg case and worest case.
getting the output in min time.
getting the output in max time.

talk/talk

if we need extra space for soolving the problems, that extra space is considered as sapce complexity

linear and non linear:
linear - linked list, stack and queue
single, double, circular.
linked list: colection of similar type of data, in random allocation.
single linked list.
it wil go in one direction
double:
both direction
circular:
head abduction trail are same

non- trees, graphs, heap

class Node{
    int data;
    Node next;
    
    Node(int data1){
        this.data= data1;
        this.next = null;
    }
    Node(int data1,Node next1){
        this.data = data1;
        this.next = next1;
    }
}
class Main {
    static Node convertArrayToLinkedlist(int[] arr){
        Node head = new Node(arr[0]);
        Node current = head;
        for(int i =1;i<arr.length;i++){
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }
        return head;
    }
    static void print(Node head){
        Node temp = head;
        while(temp!=null){
            System.out.print(temp.data + ((temp.next!= null) ? "->" :"null"));
            temp = temp.next;
        }
    }
    
    public static void main(String[] args) {
        int[] arr ={1,2,3,4,5};
        Node head = convertArrayToLinkedlist(arr);
        print(head);
    }
}


















