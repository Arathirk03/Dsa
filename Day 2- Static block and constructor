CONSTRUCTOR

constructors are used to initiaalize the objects, for every class ther will be a default constructor.whenever we create an object constructor will be called, then objct will be created. 
constructor has class name and method properties.

for eg:
public class q2{
    public static void main(String[] args){
        Demo d1 = new Demo();
        Demo d2 = new Demo();
    }
}
class Demo{
    static{
        System.out.println("Static block");
    }
    Demo() {
        System.out.println("Constructor");
    }
}

output: Static block
        Constructor
        Constructor
we create 2 objects so, constructor will be called 2 times.

STATIC BLOCK

Static block will be created with just static keyword
It will calll automatically. no need to call with either object or class.

Static method:for static method, no need to call with object, we can directly call with lcass name.
and here static will act as instance or object

code:

public class Main {
    public static void main(String[] args) {
        Person obj = new Person(); 
        
        obj.setAge(21);
        int res = obj.getAge();
        System.out.println(res);
        
        obj.setName("Art");
        String who = obj.getName();
        System.out.println(who);
        
        obj.setPassedout(true);
        boolean pass = obj.getPassedout();
        System.out.println(pass);
        
        obj.setMarks(88);
        float howMuch = obj.getMarks();
        System.out.println(howMuch);
        
        obj.setErp(1234567890);
        long what = obj.getErp();
        System.out.println(what);
    }
}
class Person {
    int age;
    String name;
    boolean passedout;
    float marks;
    long Erp;

    void setAge(int age) {
        this.age = age;
    }

    int getAge() {
        return age;
    }

    void setName(String name) {
        this.name = name;
    }

    String getName() {
        return name;
    }

    void setPassedout(boolean passedout) {
        this.passedout = passedout;
    }

    boolean getPassedout() {
        return passedout;
    }

    void setMarks(float marks) {
        this.marks = marks;
    }

    float getMarks() {
        return marks;
    }

    void setErp(long Erp1) {
        this.Erp = Erp1;
    }

    long getErp() {
        return Erp;
    }
}

output:

21
Art
true
88.0
1234567890

write a code for recursion call it in the main method (FIBONACCI)

public class Main {
    public static void main(String args[]) {
        Person obj = new Person(); 
        int res = obj.fib(7);    
        System.out.println(res);  
    }
}

class Person {
    int fib(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fib(n - 1) + fib(n - 2);
        }
    }
}

output:13

FACTORIAL

public class Main {
    public static void main(String args[]) {
        Person obj = new Person(); 
        int res = obj.fact(7);    
        System.out.println(res);  
    }
}

class Person {
    int fact(int n) {
        if (n == 0) {
            return 1;
        } else {
            return n*(fact(n-1));
        }
    }
}

output:5040

Highest common factor (HCF)

using a=b*c + d
when d becomes 0, c would be the hcf

public class Main {
    public static void main(String[] args) {
        Person obj = new Person();
        int res = obj.fib(18, 12);
        System.out.println(res);  
    }
}

class Person {
    int fib(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return fib(b, a % b); 
        }
    }
}


Conditional statements:

if, else, else-if ladder, switch case
conditional statements are used to check the condition and to print the relevant block, in constant time

Control statements:

i) entry control loop:
    for and while

    for(start;end;diff){
    }
    start;
    while(end){
      diff;
    }

when we know the range we prefer to use for loop, when we don't know the range we prefer to use while loop.
eg: int[] arr = {1,2,3,4,5};
    for (int i =0;i<n;i++){
      return arr[i];
    }

ii) exit control loop:
    do and while
eg:

public class TableOfFive {
    public static void main(String[] args) {
        int number = 5;
        int i = 1;
        
        while (i <=10) {
            System.out.println(number + " * " + i + " = " + (number * i));
            i++;
        }
    }
}

reverse a number using division and modulous(%)

public class ReverseNumber {
    public static void main(String[] args) {
        int number = 1234;
        int reversed = 0;

        while (number != 0) {
            int digit = number % 10;       
            reversed = reversed * 10 + digit; 
            number = number / 10;       
        }

        System.out.println("Reversed number: " + reversed);
    }
}
