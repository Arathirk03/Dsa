To search an element in an array in the linear way, whenever the array length is horter we will use linear search.
Time complexity is O(n)

q. [5,,11,14,16], target = 14. find the index

for i in range(len(a)):
 if (arr[i] == target):
    print[i]

binary search

To reduce time complexity, while searching, we have to use binary search.
(i + j)/2 ; middle value ; 
sorted array
in binary search the eresult is obtained in log(n) timme complexity
step:1 Initialize l pointer at 0 and r pointer at n-1
        run the loop from l to r
  break the loop when l and r crosses each other
  find the middle value(l + r)/2
  compare middle element to the target
  if its equal return middle
  if the middle value is smaller to the target, it means definitely we wont get element in the left portion of the array
  so right pointer will remain same we just have to move left pointer to [mid+1]
  if middle value is greater, we cant get element in the right portion
  so left pointer will remain same and we have to move the right pointer to the [mid - 1]

code:
public class Main {
    public static int binarySearch(int[] arr, int target) {
        int l = 0;
        int r = arr.length - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (arr[mid] == target) {
                return mid; 
            } else if (arr[mid] < target) {
                l = mid + 1; 
            } else {
                r = mid - 1; 
            }
        }
        return -1; 
    }
    public static void main(String[] args) {
        int[] data = {5, 8, 11, 14, 16};
        int target = 14;
        int result = binarySearch(data, target);

        if (result == -1) {
            System.out.println("Element not found.");
        } else {
            System.out.println(result);
        }
    }
}
   
finding elements in rotated sorted array.
[7,8,1,2,3,4,5,6]
initialize l and  r and r at zero and n-1, run the loop from l to r, 
we have to find which half is sorted, for that if array[mid] is smaller to the array[l], it means right half is sorted and if target lies, in between arr[l] and arr[mid], it means element present in left half
left pointer remains same, right pointer will come to mid -1, else element present in right half, right pointer will remain same, left pointer mid +1
if arr[mid] is greater to arr[l], left half is sorted and if target lies in between arr[r] and arr[mid]. it means element lies in right half
else 

find the lower and upper bound; 









