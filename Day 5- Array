ARRAY

Collection of similar kind of data in continuous allocation. In c and c++ we have pointers.so definitwly elements will be stored in a continuous format
In java, we don't have pointers, then there is a chance of elements might be stored in random places.
syntax:
datatype[] arr_name 

Primitive and Non-primitive
primitive: can't be divided/splitted.
eg: int, float, char
non-primitive: can be divided.
eg: string, all objects created by user
class Node{
  int data
  node next
}
All the objects will be stored in heap memory
All the references will be stored in stack memory Stack memory having less space compared to heap.

public class Main{
    public static void main(String args[]){
        int[] arr = {1,2,3,4,5};
        for(int i =0;i<arr.length;i++){
        System.out.println(arr[i]);
    }}
}

All the variables are stored in same datatype. Instead of creating multiple variables. Create an array.
If we create multiple variables to get the data, simply we can print the variable. When it comes to array, if we want to print the data, we can print using index values.
By default index values will start from zero

public class Main{
    
declaration and initialisation happened in same line

To get the length of the array, we have a method called array.length.
In arrays it is array_name.length and in strings its string_name.length()

Camel case and Snake case
array_name: Snake case
arrayName: Camel case
In java,it is prefferd to use camel case to write production level code.
eg for camel case:
void additionOfTwoNumbers()

Type of printing formats
public class Main{
    public static void main(String args[]){
        int[] arr = {1,2,3,4,5};
        for(int i :arr){
            System.out.print(i+ "");
        }
    }
}

output:12345

In for-each loop we don't need index values.

import java.util.Arrays;

public class Main {
    public static void main(String args[]) {
        int[] arr = {1, 2, 3, 4, 5};
        System.out.print(Arrays.toString(arr));
    }
}
toString is an inbuilt method to print an array
toString can accept only one argument and that to array

Declaring the size of array and initialising the values later(taking values from user)
Array having fixed size, if we declare an array size it can't be changed
int[] arr = new int[5];
int array before array reference was created with the help of new keyword actual object will be created in the heap memory.
further particular datatype and size
if array type is int the default values will be zero, if it is a string all the default values are null and null is a literal.
Whenever you are assigning or trying to get end value for an array you will get an exception; Array out of bound.














